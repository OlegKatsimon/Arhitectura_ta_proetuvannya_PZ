#include <iostream>
#include <string>

// Інтерфейс обробника
class Handler {
public:
    virtual ~Handler() {}
    virtual void setNext(Handler* next) = 0;
    virtual void handleRequest(const std::string& request) = 0;
};

// Конкретний обробник A
class ConcreteHandlerA : public Handler {
private:
    Handler* nextHandler;

public:
    ConcreteHandlerA() : nextHandler(nullptr) {}

    void setNext(Handler* next) override {
        nextHandler = next;
    }

    void handleRequest(const std::string& request) override {
        if (request == "A") {
            std::cout << "Handler A handling request: " << request << std::endl;
        } else if (nextHandler) {
            nextHandler->handleRequest(request);
        }
    }
};

// Конкретний обробник B
class ConcreteHandlerB : public Handler {
private:
    Handler* nextHandler;

public:
    ConcreteHandlerB() : nextHandler(nullptr) {}

    void setNext(Handler* next) override {
        nextHandler = next;
    }

    void handleRequest(const std::string& request) override {
        if (request == "B") {
            std::cout << "Handler B handling request: " << request << std::endl;
        } else if (nextHandler) {
            nextHandler->handleRequest(request);
        }
    }
};

// Конкретний обробник C
class ConcreteHandlerC : public Handler {
private:
    Handler* nextHandler;

public:
    ConcreteHandlerC() : nextHandler(nullptr) {}

    void setNext(Handler* next) override {
        nextHandler = next;
    }

    void handleRequest(const std::string& request) override {
        if (request == "C") {
            std::cout << "Handler C handling request: " << request << std::endl;
        } else if (nextHandler) {
            nextHandler->handleRequest(request);
        }
    }
};

int main() {
    ConcreteHandlerA* handlerA = new ConcreteHandlerA();
    ConcreteHandlerB* handlerB = new ConcreteHandlerB();
    ConcreteHandlerC* handlerC = new ConcreteHandlerC();

    // Формуємо ланцюг обробників
    handlerA->setNext(handlerB);
    handlerB->setNext(handlerC);

    // Тестові запити
    handlerA->handleRequest("A");
    handlerA->handleRequest("B");
    handlerA->handleRequest("C");
    handlerA->handleRequest("D"); // Невідомий запит

    delete handlerA;
    delete handlerB;
    delete handlerC;

    return 0;
}
